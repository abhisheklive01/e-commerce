import 'package:flutter/material.dart';

void main() {
  runApp(MaterialApp(home: DragDropGame()));
}

class DragDropGame extends StatefulWidget {
  @override
  _DragDropGameState createState() => _DragDropGameState();
}

class _DragDropGameState extends State<DragDropGame> {
  String? firstWord;
  String? secondWord;

  final List<String> words = ["yellow", "green", "blue", "angry", "scaly", "furry"];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFF5C4033), // Brown background to match the example
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          // Sentence Display
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 40),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text("This is a ", style: _textStyle(Colors.white)),
                _buildDropTarget(isFirst: true),
                Text(", ", style: _textStyle(Colors.white)),
                _buildDropTarget(isFirst: false),
                Text(" monster.", style: _textStyle(Colors.white)),
              ],
            ),
          ),

          // Word Choices (Draggables)
          Expanded(
            child: GridView.count(
              crossAxisCount: 3,
              childAspectRatio: 2.5,
              padding: EdgeInsets.all(10),
              children: words
                  .map((word) => Draggable<String>(
                        data: word,
                        feedback: _buildDraggableWord(word, isDragging: true),
                        childWhenDragging: Opacity(opacity: 0.3, child: _buildDraggableWord(word)),
                        child: _buildDraggableWord(word),
                      ))
                  .toList(),
            ),
          ),

          // Confirm Button
          if (firstWord != null && secondWord != null)
            ElevatedButton(
              onPressed: _showSuccessDialog,
              child: Text("âœ” Confirm", style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                padding: EdgeInsets.symmetric(horizontal: 40, vertical: 15),
              ),
            ),

          SizedBox(height: 20),
        ],
      ),
    );
  }

  // Drop Target Box
  Widget _buildDropTarget({required bool isFirst}) {
    String? word = isFirst ? firstWord : secondWord;
    double width = word != null ? word.length * 12.0 + 20 : 60; // Dynamic width adjustment

    return DragTarget<String>(
      onAccept: (value) {
        setState(() {
          if (isFirst) {
            firstWord = value;
          } else {
            secondWord = value;
          }
        });
      },
      builder: (context, candidateData, rejectedData) {
        return Container(
          width: width,
          height: 40,
          alignment: Alignment.center,
          decoration: BoxDecoration(
            color: word != null ? Colors.transparent : Colors.white,
            border: Border.all(color: Colors.black, width: 2),
            borderRadius: BorderRadius.circular(10),
          ),
          child: Text(word ?? "____", style: _textStyle(Colors.white)),
        );
      },
    );
  }

  // Draggable Word Style
  Widget _buildDraggableWord(String word, {bool isDragging = false}) {
    return Container(
      margin: EdgeInsets.all(5),
      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      decoration: BoxDecoration(
        color: isDragging ? Colors.blueAccent : _getColorForWord(word),
        borderRadius: BorderRadius.circular(10),
      ),
      child: Center(
        child: Text(
          word,
          style: _textStyle(Colors.white),
        ),
      ),
    );
  }

  // Success Dialog
  void _showSuccessDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text("Great Job! ðŸŽ‰", style: _textStyle(Colors.black)),
          content: Text("You made a $firstWord, $secondWord monster!", style: _textStyle(Colors.black)),
          actions: [
            TextButton(
              onPressed: () {
                setState(() {
                  firstWord = null;
                  secondWord = null;
                });
                Navigator.pop(context);
              },
              child: Text("Play Again"),
            ),
          ],
        );
      },
    );
  }

  // Custom Text Style using Material Default Font
  TextStyle _textStyle(Color color) {
    return TextStyle(
      fontSize: 22,
      fontWeight: FontWeight.bold,
      color: color,
      fontFamily: 'Roboto', // Default Material Design Font
    );
  }

  // Assign Colors for Word Categories
  Color _getColorForWord(String word) {
    if (["yellow", "blue", "green"].contains(word)) {
      return Colors.purple[200]!; // Colors for color words
    } else {
      return Colors.green[700]!; // Colors for texture/emotion words
    }
  }
}
